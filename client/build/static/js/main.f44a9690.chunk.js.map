{"version":3,"sources":["views/CreateItem.js","views/SingleItem.js","views/Items.js","App.js","serviceWorker.js","index.js"],"names":["CreateItem","props","useState","name","setName","condition","setCondition","desc","setDesc","imageURL","setImageURL","price","setPrice","quantity","setQuantity","date","setDate","errors","setErrors","className","onSubmit","event","preventDefault","newWannabuy","axios","post","then","res","navigate","catch","err","console","error","response","data","onChange","target","value","type","message","placeholder","class","SingleItem","id","item","setItem","msg","setMsg","bidAmount","setBidAmount","io","socket","useEffect","get","toFixed","log","on","updatedItem","disconnect","put","emit","e","step","disabled","Items","items","setItems","sort","a","b","style","textAlign","scope","map","idx","key","paddingBottom","borderBottom","width","src","alt","moment","format","to","_id","App","from","noThrow","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAwHeA,EAlHI,SAAAC,GAAU,IAAD,EACFC,mBAAS,IADP,mBACnBC,EADmB,KACbC,EADa,OAEQF,mBAAS,IAFjB,mBAEnBG,EAFmB,KAERC,EAFQ,OAGFJ,mBAAS,IAHP,mBAGnBK,EAHmB,KAGbC,EAHa,OAIMN,mBAAS,IAJf,mBAInBO,EAJmB,KAITC,EAJS,OAKAR,mBAAS,IALT,mBAKnBS,EALmB,KAKZC,EALY,OAMMV,mBAAS,IANf,mBAMnBW,EANmB,KAMTC,EANS,OAOFZ,mBAAS,IAPP,mBAOnBa,EAPmB,KAObC,EAPa,OAQEd,mBAAS,IARX,mBAQnBe,EARmB,KAQXC,EARW,KAkC1B,OACE,oCACE,wDACA,yBAAKC,UAAU,oBACb,8DACA,0BAAMC,SA7BS,SAAAC,GACnBA,EAAMC,iBAEN,IAAMC,EAAc,CAClBpB,OACAE,YACAE,OACAE,WACAE,QACAE,WACAE,QAGFS,IACGC,KAAK,sCAAuCF,GAC5CG,MAAK,SAAAC,GACJC,YAAS,kBAEVC,OAAM,SAAAC,GACLC,QAAQC,MAAMF,EAAIG,UAClBf,EAAUY,EAAIG,SAASC,KAAKjB,aAU1B,6BACE,8CACA,2BACEkB,SAAU,SAAAd,GAAK,OAAIjB,EAAQiB,EAAMe,OAAOC,QACxCC,KAAK,SAENrB,EAAOd,KACN,0BAAMgB,UAAU,SAASF,EAAOd,KAAKoC,SAErC,IAIJ,6BACE,8CACA,2BACEJ,SAAU,SAAAd,GAAK,OAAIf,EAAae,EAAMe,OAAOC,QAC7CC,KAAK,SAENrB,EAAOZ,UACN,0BAAMc,UAAU,SAASF,EAAOZ,UAAUkC,SAE1C,IAIJ,6BACE,qDACA,8BACEJ,SAAU,SAAAd,GAAK,OAAIb,EAAQa,EAAMe,OAAOC,QACxCC,KAAK,SAENrB,EAAOV,KACN,0BAAMY,UAAU,SAASF,EAAOV,KAAKgC,SAErC,IAGJ,6BACE,+CACA,2BACEJ,SAAU,SAAAd,GAAK,OAAIX,EAAYW,EAAMe,OAAOC,QAC5CC,KAAK,UAGT,6BACE,+CACA,2BACEH,SAAU,SAAAd,GAAK,OAAIT,EAASS,EAAMe,OAAOC,QACzCC,KAAK,OACLE,YAAY,iBAGhB,6BACE,kDACA,2BACEL,SAAU,SAAAd,GAAK,OAAIP,EAAYO,EAAMe,OAAOC,QAC5CC,KAAK,UAGT,6BACE,yDACA,2BACEH,SAAU,SAAAd,GAAK,OAAIL,EAAQK,EAAMe,OAAOC,QACxCC,KAAK,UAGT,4BAAQG,MAAM,mBAAd,gB,iBCiCKC,EA3II,SAAC,GAAY,IAAVC,EAAS,EAATA,GAAS,EACLzC,mBAAS,IADJ,mBACtB0C,EADsB,KAChBC,EADgB,OAEP3C,mBAAS,IAFF,mBAEtB4C,EAFsB,KAEjBC,EAFiB,OAGK7C,mBAAS,IAHd,mBAGtB8C,EAHsB,KAGXC,EAHW,OAKZ/C,oBAAS,kBAAMgD,IAAG,YAA5BC,EALsB,oBAgF7B,OAzEAC,qBAAU,WACR5B,IACG6B,IAAI,uCAAyCV,GAC7CjB,MAAK,SAAAC,GACJkB,EAAQlB,EAAIO,MACZe,GAActB,EAAIO,KAAKvB,MAAQ,GAAG2C,QAAQ,OAE3CzB,OAAM,SAAAC,GACLC,QAAQwB,IAAIzB,GACZiB,EAAO,8BAEV,CAACJ,IAEJS,qBAAU,WAcR,OAXAD,EAAOK,GAAG,gBAAgB,SAAAC,GACxBZ,EAAQY,GAGRR,GAAcQ,EAAY9C,MAAQ,GAAG2C,QAAQ,IAEnB,KAAtBG,EAAY9C,OACdoC,EAAO,eAIJ,kBAAMI,EAAOO,YAAW,MAC9B,IA6CU,OAATd,EACKE,EAIP,6BAEE,uCAAaA,GACb,oCAAUF,EAAKjC,OACf,0BAAMS,SApDV,SAAyBC,GACvBA,EAAMC,iBAEF0B,EAAYJ,EAAKjC,QAEjBiC,EAAKjC,MADHqC,EAAY,GACD,IAECA,EAGhBxB,IACGmC,IAAI,uCAAyChB,EAAIC,GACjDlB,MAAK,SAAAC,GACJwB,EAAOS,KAAK,eAAgBjC,EAAIO,MAE5BP,EAAIO,KAAKvB,SAGdkB,OAAM,SAAAC,GACLC,QAAQwB,IAAI,gBAAiBzB,SAkC/B,+CACA,2BACEK,SAAU,SAAA0B,GAAC,OAAIZ,EAAaY,EAAEzB,OAAOC,QACrCA,MAAOW,EACPV,KAAK,SACLwB,KAAK,MAEP,4BAAQC,SAAUnB,EAAKjC,OAAS,IAAhC,gB,iBCCOqD,EAnGD,SAAA/D,GAAU,IAAD,EACKC,mBAAS,IADd,mBACd+D,EADc,KACPC,EADO,KA2CrB,OAxCAd,qBAAU,WACR5B,IACG6B,IAAI,uCACJ3B,MAAK,SAAAC,GAAG,OACPuC,EACEvC,EAAIO,KAAKiC,MAAK,SAACC,EAAGC,GAChB,OAAID,EAAErD,KAAOsD,EAAEtD,MAAc,EAEzBqD,EAAErD,KAAOsD,EAAEtD,KAAa,EAErB,SAIZc,MAAME,QAAQwB,OAchB,IAaD,oCACE,yBAAKd,MAAM,aACT,yBAAKA,MAAM,OACT,4DACA,6BACA,yBAAK6B,MAAO,CAAEC,UAAW,WACvB,+BACE,+BACE,4BACE,wBAAIC,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,eACA,wBAAIA,MAAM,OAAV,aACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,UAAV,QACA,wBAAIA,MAAM,OAAV,qBACA,wBAAIA,MAAM,OAAV,SAGJ,+BACGP,EAAMQ,KAAI,SAAC7B,EAAM8B,GAAP,OACT,wBAAIC,IAAKD,GACP,4BAAK9B,EAAKzC,MACV,4BAAKyC,EAAKrC,MACV,4BAAKqC,EAAKvC,WACV,4BACE,yBACEiE,MAAO,CACLM,cAAe,GACfC,aAAc,kBAEhBC,MAAM,QACNC,IAAKnC,EAAKnC,SACVuE,IAAG,UAAKpC,EAAKzC,KAAV,YAGP,4BAAK8E,IAAOrC,EAAK7B,MAAMmE,OAAO,iBAC9B,4BAAKtC,EAAKjC,OACV,4BACE,kBAAC,IAAD,CAAMwE,GAAI,cAAgBvC,EAAKwC,KAA/B,gBAAwD,gBCjD/DC,MA5Bf,WACE,OACE,oCACE,yBAAKlE,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,6CAEF,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAMgE,GAAG,kBAAT,6BAEF,yBAAKhE,UAAU,OACb,kBAAC,IAAD,CAAMgE,GAAG,eAAT,mBAIN,yBAAKhE,UAAU,yCACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUmE,KAAK,IAAIH,GAAG,aAAaI,QAAQ,SAC3C,kBAAC,EAAD,CAAYC,KAAK,mBACjB,kBAAC,EAAD,CAAYA,KAAK,mBACjB,kBAAC,EAAD,CAAOA,KAAK,mBCpBFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3E,MAAK,SAAA4E,GACJA,EAAaC,gBAEd1E,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMO,a","file":"static/js/main.f44a9690.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { navigate } from \"@reach/router\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst CreateItem = props => {\r\n  const [name, setName] = useState(\"\");\r\n  const [condition, setCondition] = useState(\"\");\r\n  const [desc, setDesc] = useState(\"\");\r\n  const [imageURL, setImageURL] = useState(\"\");\r\n  const [price, setPrice] = useState(\"\");\r\n  const [quantity, setQuantity] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const newWannabuy = {\r\n      name,\r\n      condition,\r\n      desc,\r\n      imageURL,\r\n      price,\r\n      quantity,\r\n      date\r\n    };\r\n\r\n    axios\r\n      .post(\"http://localhost:8000/api/wannabuys\", newWannabuy)\r\n      .then(res => {\r\n        navigate(\"/wannabuys/\");\r\n      })\r\n      .catch(err => {\r\n        console.error(err.response);\r\n        setErrors(err.response.data.errors);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>What do you want to buy?</h1>\r\n      <div className=\"single-container\">\r\n        <h2>Post the Item you want to buy!</h2>\r\n        <form onSubmit={handleSubmit}>\r\n          <div>\r\n            <label>Item Name: </label>\r\n            <input\r\n              onChange={event => setName(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n            {errors.name ? (\r\n              <span className=\"error\">{errors.name.message}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label>Condition: </label>\r\n            <input\r\n              onChange={event => setCondition(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n            {errors.condition ? (\r\n              <span className=\"error\">{errors.condition.message}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <label>Item Description: </label>\r\n            <textarea\r\n              onChange={event => setDesc(event.target.value)}\r\n              type=\"text\"\r\n            ></textarea>\r\n            {errors.desc ? (\r\n              <span className=\"error\">{errors.desc.message}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          <div>\r\n            <label>Item Image: </label>\r\n            <input\r\n              onChange={event => setImageURL(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Item Price: </label>\r\n            <input\r\n              onChange={event => setPrice(event.target.value)}\r\n              type=\"text\"\r\n              placeholder=\"minimum $50\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Item Quantity: </label>\r\n            <input\r\n              onChange={event => setQuantity(event.target.value)}\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>When do you want it?: </label>\r\n            <input\r\n              onChange={event => setDate(event.target.value)}\r\n              type=\"date\"\r\n            />\r\n          </div>\r\n          <button class=\"btn btn-primary\">Add Item</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { navigate } from \"@reach/router\";\r\nimport axios from \"axios\";\r\n\r\nimport io from \"socket.io-client\";\r\n\r\n// id prop comes from the URL, see routing :id\r\nconst SingleItem = ({ id }) => {\r\n  const [item, setItem] = useState({});\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [bidAmount, setBidAmount] = useState(\"\");\r\n\r\n  const [socket] = useState(() => io(\":8000\"));\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/wannabuys/\" + id)\r\n      .then(res => {\r\n        setItem(res.data);\r\n        setBidAmount((res.data.price - 1).toFixed(2));\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        setMsg(\"Error Retrieving Item\");\r\n      });\r\n  }, [id]);\r\n\r\n  useEffect(() => {\r\n    // add this listener once so we don't have\r\n    // multiple listeners listening for same event\r\n    socket.on(\"item updated\", updatedItem => {\r\n      setItem(updatedItem);\r\n\r\n      // toFixed fixes floating point math imprecision\r\n      setBidAmount((updatedItem.price - 1).toFixed(2));\r\n\r\n      if (updatedItem.price === 50) {\r\n        setMsg(\"Bid Over\");\r\n      }\r\n    });\r\n\r\n    return () => socket.disconnect(true);\r\n  }, []);\r\n\r\n  function handleBidSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    if (bidAmount < item.price) {\r\n      if (bidAmount < 50) {\r\n        item.price = 50;\r\n      } else {\r\n        item.price = +bidAmount;\r\n      }\r\n\r\n      axios\r\n        .put(\"http://localhost:8000/api/wannabuys/\" + id, item)\r\n        .then(res => {\r\n          socket.emit(\"item updated\", res.data);\r\n\r\n          if (res.data.price) {\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(\"error posting\", err);\r\n        });\r\n    }\r\n  }\r\n\r\n  //   const handleDelete = idToDel => {\r\n  //     axios\r\n  //       .delete(\"http://localhost:8000/api/pets/\" + idToDel)\r\n  //       .then(() => {\r\n  //         navigate(\"/pets/\");\r\n  //       })\r\n  //       .catch(console.log);\r\n  //   };\r\n\r\n  //     axios\r\n  //       .put(\"http://localhost:8000/wannabuys/items/\" + id, item)\r\n  //       .then(res => {\r\n  //         const updatedItem = res.data;\r\n  //         setPet(updatedItem);\r\n  //         setAlreadyVoted(true);\r\n  //       })\r\n  //       .catch(console.log);\r\n  //   };\r\n\r\n  if (item === null) {\r\n    return msg;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* {JSON.stringify(item)} */}\r\n      <p>Message: {msg}</p>\r\n      <p>Price {item.price}</p>\r\n      <form onSubmit={handleBidSubmit}>\r\n        <label>Bid Amount: </label>\r\n        <input\r\n          onChange={e => setBidAmount(e.target.value)}\r\n          value={bidAmount}\r\n          type=\"number\"\r\n          step=\"1\"\r\n        />\r\n        <button disabled={item.price <= 50 ? true : false}>Place Bid</button>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  // return (\r\n  //   <div className=\"text-center\">\r\n  //     <h2>Item Name: {item.name}</h2>\r\n  //     {/* <button class=\"btn btn-danger\" onClick={event => handleDelete(pet._id)}>\r\n  //       Adopt {pet.name}\r\n  //     </button> */}\r\n  //     <div className=\"single-container\">\r\n  //       <p>Condition: {item.condition}</p>\r\n  //       <p>Description {item.desc}</p>\r\n  //       <p>\r\n  //         <img\r\n  //           style={{\r\n  //             paddingBottom: 20,\r\n  //             borderBottom: \"2px solid gray\"\r\n  //           }}\r\n  //           width=\"40%\"\r\n  //           src={item.imageURL}\r\n  //           alt={`${item.name} item`}\r\n  //         />\r\n  //       </p>\r\n  //       <p>Price:{item.price}</p>\r\n  //       <p>Quantity: {item.quantity} </p>\r\n  //       <p>Date: {item.date} </p>\r\n  //       {/* <button\r\n  //         onClick={event => handleVote(true)}\r\n  //         className=\"arrow\"\r\n  //         class=\"btn btn-success\"\r\n  //       >\r\n  //         {\" \"}\r\n  //         Like {pet.name}{\" \"}\r\n  //       </button>\r\n  //       <p>{pet.likeCount}&uarr; likes </p> */}\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n};\r\n\r\nexport default SingleItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport moment from \"moment\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nconst Items = props => {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/wannabuys\")\r\n      .then(res =>\r\n        setItems(\r\n          res.data.sort((a, b) => {\r\n            if (a.date < b.date) return -1;\r\n\r\n            if (a.date > b.date) return 1;\r\n\r\n            return 0;\r\n          })\r\n        )\r\n      )\r\n      .catch(console.log);\r\n\r\n    // the currently connected socket wouldn eed to be made available to this component, meaning move socket to App.js and pass it down as a prop to whatever needs it\r\n    // socket.on(\"item updated\", updatedItem => {\r\n    //   setItems(prevItems => {\r\n    //     prevItems.map(currItem => {\r\n    //       if (currItem._id === updatedItem._id) {\r\n    //         return updatedItem;\r\n    //       } else {\r\n    //         return currItem;\r\n    //       }\r\n    //     });\r\n    //   });\r\n    // });\r\n  }, []);\r\n\r\n  //   const handleDelete = idToDel => {\r\n  //     axios\r\n  //       .delete(\"http://localhost:8000/api/wannabuys/\" + idToDel)\r\n  //       .then(res => {\r\n  //         const filteredPosts = items.filter(item => item._id !== idToDel);\r\n  //         setItems(filteredPosts);\r\n  //       })\r\n  //       .catch(console.log);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <h3>What are you looking to buy?</h3>\r\n          <hr />\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\">Item Name</th>\r\n                  <th scope=\"col\">Description</th>\r\n                  <th scope=\"col\">Condition</th>\r\n                  <th scope=\"col\">Item Image</th>\r\n                  <th scope=\"col-sm\">Date</th>\r\n                  <th scope=\"col\">Current Bid Price</th>\r\n                  <th scope=\"col\">Bid</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {items.map((item, idx) => (\r\n                  <tr key={idx}>\r\n                    <td>{item.name}</td>\r\n                    <td>{item.desc}</td>\r\n                    <td>{item.condition}</td>\r\n                    <td>\r\n                      <img\r\n                        style={{\r\n                          paddingBottom: 20,\r\n                          borderBottom: \"2px solid gray\"\r\n                        }}\r\n                        width=\"150px\"\r\n                        src={item.imageURL}\r\n                        alt={`${item.name} item`}\r\n                      />\r\n                    </td>\r\n                    <td>{moment(item.date).format(\"MMMM D, YYYY\")}</td>\r\n                    <td>{item.price}</td>\r\n                    <td>\r\n                      <Link to={\"/wannabuys/\" + item._id}>Want to bid?</Link>{\" \"}\r\n                      {/* <Link to={\"/pets/\" + pet._id + \"/edit\"}>Edit</Link> |{\" \"} */}\r\n                      {/* <button onClick={event => handleDelete(pet._id)}>\r\n                    Adopt\r\n                  </button> */}\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Items;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { Link, Redirect, Router } from \"@reach/router\";\n\nimport CreateItem from \"./views/CreateItem\";\nimport SingleItem from \"./views/SingleItem\";\nimport Items from \"./views/Items\";\n// import EditItem from \"./views/EditItem\";\n\nfunction App() {\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col\">\n            <h1>WannaBuy.com</h1>\n          </div>\n          <div className=\"col\">\n            <Link to=\"/wannabuys/new\">What do you want to buy?</Link>\n          </div>\n          <div className=\"col\">\n            <Link to=\"/wannabuys/\">Back to home</Link>\n          </div>\n        </div>\n      </div>\n      <div className=\"container-flex justify-content-center\">\n        <Router>\n          <Redirect from=\"/\" to=\"/wannabuys\" noThrow=\"true\" />\n          <CreateItem path=\"/wannabuys/new\" />\n          <SingleItem path=\"/wannabuys/:id\" />\n          <Items path=\"/wannabuys\" />\n        </Router>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}